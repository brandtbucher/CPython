diff --git a/.gitignore b/.gitignore
index 6ed7197e3a..951b88646d 100644
--- a/.gitignore
+++ b/.gitignore
@@ -126,7 +126,7 @@ Tools/unicode/data/
 # hendrikmuhs/ccache-action@v1
 /.ccache
 /cross-build/
-/jit_stencils.h
+/jit_stencils/
 /platform
 /profile-clean-stamp
 /profile-run-stamp
diff --git a/Makefile.pre.in b/Makefile.pre.in
index 4c1a18602b..42a634b0a3 100644
--- a/Makefile.pre.in
+++ b/Makefile.pre.in
@@ -2692,10 +2692,10 @@ JIT_DEPS = \
 		$(srcdir)/Python/executor_cases.c.h \
 		pyconfig.h
 
-jit_stencils.h: $(JIT_DEPS)
+jit_stencils: $(JIT_DEPS)
 	@REGEN_JIT_COMMAND@
 
-Python/jit.o: $(srcdir)/Python/jit.c @JIT_STENCILS_H@
+Python/jit.o: $(srcdir)/Python/jit.c @JIT_STENCILS@
 	$(CC) -c $(PY_CORE_CFLAGS) -o $@ $<
 
 .PHONY: regen-jit
@@ -2794,7 +2794,7 @@ clean-retain-profile: pycremoval
 	-rm -f Python/deepfreeze/*.[co]
 	-rm -f Python/frozen_modules/*.h
 	-rm -f Python/frozen_modules/MANIFEST
-	-rm -f jit_stencils.h
+	-rm -f jit_stencils/*
 	-find build -type f -a ! -name '*.gc??' -exec rm -f {} ';'
 	-rm -f Include/pydtrace_probes.h
 	-rm -f profile-gen-stamp
diff --git a/PCbuild/regen.targets b/PCbuild/regen.targets
index 8f31803dbb..0bcfe91064 100644
--- a/PCbuild/regen.targets
+++ b/PCbuild/regen.targets
@@ -30,7 +30,7 @@
     <_KeywordOutputs Include="$(PySourcePath)Lib\keyword.py" />
     <!-- Taken from _Target._compute_digest in Tools\jit\_targets.py: -->
     <_JITSources Include="$(PySourcePath)Python\executor_cases.c.h;$(GeneratedPyConfigDir)pyconfig.h;$(PySourcePath)Tools\jit\**"/>
-    <_JITOutputs Include="$(GeneratedPyConfigDir)jit_stencils.h"/>
+    <_JITOutputs Include="$(GeneratedPyConfigDir)jit_stencils\**"/>
     <_CasesSources Include="$(PySourcePath)Python\bytecodes.c;$(PySourcePath)Python\tier2_redundancy_eliminator_bytecodes.c;"/>
     <_CasesOutputs Include="$(PySourcePath)Python\generated_cases.c.h;$(PySourcePath)Include\opcode_ids.h;$(PySourcePath)Include\internal\pycore_uop_ids.h;$(PySourcePath)Python\opcode_targets.h;$(PySourcePath)Include\internal\pycore_opcode_metadata.h;$(PySourcePath)Include\internal\pycore_uop_metadata.h;$(PySourcePath)Python\tier2_redundancy_eliminator_cases.c.h;$(PySourcePath)Lib\_opcode_metadata.py"/>
   </ItemGroup>
diff --git a/Python/jit.c b/Python/jit.c
index 839414bd81..4e03ae7b0b 100644
--- a/Python/jit.c
+++ b/Python/jit.c
@@ -16,7 +16,21 @@
 #include "pycore_sliceobject.h"
 #include "pycore_jit.h"
 
-#include "jit_stencils.h"
+#if defined(__aarch64__) && defined(__APPLE__)
+    #include "jit_stencils/aarch64-apple-darwin.h"
+#elif defined(__aarch64__) && defined(__linux__)
+    #include "jit_stencils/aarch64-unknown-linux-gnu.h"
+#elif defined(_M_IX86)
+    #include "jit_stencils/i686-pc-windows-msvc.h"
+#elif defined(__x86_64__) && defined(__APPLE__)
+    #include "jit_stencils/x86_64-apple-darwin.h"
+#elif defined(_M_X64)
+    #include "jit_stencils/x86_64-pc-windows-msvc.h"
+#elif defined(__x86_64__) && defined(__linux__)
+    #include "jit_stencils/x86_64-unknown-linux-gnu.h"
+#else
+    #error "JIT not supported for this platform"
+#endif
 
 // Memory management stuff: ////////////////////////////////////////////////////
 
diff --git a/Tools/jit/_targets.py b/Tools/jit/_targets.py
index 6c1d440324..82026bab97 100644
--- a/Tools/jit/_targets.py
+++ b/Tools/jit/_targets.py
@@ -153,9 +153,10 @@ async def _build_stencils(self) -> dict[str, _stencils.StencilGroup]:
         return {task.get_name(): task.result() for task in tasks}
 
     def build(self, out: pathlib.Path, *, comment: str = "") -> None:
-        """Build jit_stencils.h in the given directory."""
+        """Build jit_stencils in the given directory."""
         digest = f"// {self._compute_digest(out)}\n"
-        jit_stencils = out / "jit_stencils.h"
+        jit_stencils = out / "jit_stencils" / f"{self.triple}.h"
+        jit_stencils.parent.mkdir(parents=True, exist_ok=True)
         if (
             not self.force
             and jit_stencils.exists()
@@ -379,15 +380,15 @@ def _handle_relocation(
 def get_target(host: str) -> _COFF | _ELF | _MachO:
     """Build a _Target for the given host "triple" and options."""
     if re.fullmatch(r"aarch64-apple-darwin.*", host):
-        return _MachO(host, alignment=8, prefix="_")
+        return _MachO("aarch64-apple-darwin", alignment=8, prefix="_")
     if re.fullmatch(r"aarch64-.*-linux-gnu", host):
-        return _ELF(host, alignment=8)
+        return _ELF("aarch64-unknown-linux-gnu", alignment=8)
     if re.fullmatch(r"i686-pc-windows-msvc", host):
-        return _COFF(host, prefix="_")
+        return _COFF("i686-pc-windows-msvc", prefix="_")
     if re.fullmatch(r"x86_64-apple-darwin.*", host):
-        return _MachO(host, prefix="_")
+        return _MachO("x86_64-apple-darwin", prefix="_")
     if re.fullmatch(r"x86_64-pc-windows-msvc", host):
-        return _COFF(host)
+        return _COFF("x86_64-pc-windows-msvc")
     if re.fullmatch(r"x86_64-.*-linux-gnu", host):
-        return _ELF(host)
+        return _ELF("x86_64-unknown-linux-gnu")
     raise ValueError(host)
diff --git a/Tools/jit/build.py b/Tools/jit/build.py
index 4d4ace14eb..95951ab93f 100644
--- a/Tools/jit/build.py
+++ b/Tools/jit/build.py
@@ -10,7 +10,7 @@
     comment = f"$ {shlex.join([sys.executable] + sys.argv)}"
     parser = argparse.ArgumentParser(description=__doc__)
     parser.add_argument(
-        "target", type=_targets.get_target, help="a PEP 11 target triple to compile for"
+        "target", nargs="+", type=_targets.get_target, help="a PEP 11 target triple to compile for"
     )
     parser.add_argument(
         "-d", "--debug", action="store_true", help="compile for a debug build of Python"
@@ -22,7 +22,8 @@
         "-v", "--verbose", action="store_true", help="echo commands as they are run"
     )
     args = parser.parse_args()
-    args.target.debug = args.debug
-    args.target.force = args.force
-    args.target.verbose = args.verbose
-    args.target.build(pathlib.Path.cwd(), comment=comment)
+    for target in args.target:
+        target.debug = args.debug
+        target.force = args.force
+        target.verbose = args.verbose
+        target.build(pathlib.Path.cwd(), comment=comment)
diff --git a/configure b/configure
index b910d05ca6..16e303acea 100755
--- a/configure
+++ b/configure
@@ -921,7 +921,7 @@ LLVM_AR
 PROFILE_TASK
 DEF_MAKE_RULE
 DEF_MAKE_ALL_RULE
-JIT_STENCILS_H
+JIT_STENCILS
 REGEN_JIT_COMMAND
 ABIFLAGS
 LN
@@ -8055,7 +8055,7 @@ then :
 else $as_nop
   as_fn_append CFLAGS_NODIST " -D_Py_JIT"
            REGEN_JIT_COMMAND="\$(PYTHON_FOR_REGEN) \$(srcdir)/Tools/jit/build.py $host"
-           JIT_STENCILS_H="jit_stencils.h"
+           JIT_STENCILS="jit_stencils"
            if test "x$Py_DEBUG" = xtrue
 then :
   as_fn_append REGEN_JIT_COMMAND " --debug"
diff --git a/configure.ac b/configure.ac
index 5b655e57ef..845491eef1 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1635,13 +1635,13 @@ AS_VAR_IF([enable_experimental_jit],
           [AS_VAR_APPEND([CFLAGS_NODIST], [" -D_Py_JIT"])
            AS_VAR_SET([REGEN_JIT_COMMAND],
                       ["\$(PYTHON_FOR_REGEN) \$(srcdir)/Tools/jit/build.py $host"])
-           AS_VAR_SET([JIT_STENCILS_H], ["jit_stencils.h"])
+           AS_VAR_SET([JIT_STENCILS], ["jit_stencils"])
            AS_VAR_IF([Py_DEBUG],
                      [true],
                      [AS_VAR_APPEND([REGEN_JIT_COMMAND], [" --debug"])],
                      [])])
 AC_SUBST([REGEN_JIT_COMMAND])
-AC_SUBST([JIT_STENCILS_H])
+AC_SUBST([JIT_STENCILS])
 AC_MSG_RESULT([$enable_experimental_jit])
 
 # Enable optimization flags
